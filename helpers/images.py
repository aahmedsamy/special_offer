from django.core.files.base import ContentFile
from django.conf import settings
import tinify
import base64
import uuid


class Image:
    def __init__(self):
        self.BASE_DIR = settings.BASE_DIR
        self.MEDIA_DIR = settings.MEDIA_DIR
        self.MEDIA_ROOT = settings.MEDIA_ROOT
        self.MEDIA_URL = settings.MEDIA_URL
        self.TINIFY_API_KEY = settings.TINIFY_API_KEY

    @classmethod
    def compress_image_tinify(cls, image):
        """
        uses tinify library to compress images
        pip install tinify
        returns the compressed image link with <image>_small.<ext>
        """
        obj = cls()
        path = obj.MEDIA_ROOT + image.url
        image_name_split = image.name.rsplit('.', 1)
        obj.image_name = image_name_split[0]+'_small.'+image_name_split[1]
        image_full_path = obj.MEDIA_ROOT+"/"+obj.image_name
        tinify.key = obj.TINIFY_API_KEY
        source = tinify.from_file(path)
        source.to_file(image_full_path)
        return obj.MEDIA_URL + obj.image_name

    def get_image_name(ext):
        return "{}.{}".format(uuid.uuid5.hex, ext)

    @classmethod
    def compress_list_of_images(cls, images):
        obj = cls()
        for image in images:
            # img = Image()
            image.small_image_path = obj.compress_image_tinify(image.image)
            image.save()

    # def convert_base64_to_image_file(
    #     self, data, destination, image_url_to_be_deleted=None):
    #     """
    #     takes base64 encoded image and decode it, then saves it
    #     to destination with unique name generated by uuid5
    #     """
    #     format, imgstr = data.split(';base64,')
    #     ext = format.split('/')[-1]
    #     imgdata = base64.b64decode(imgstr)
    #     image_name = self.get_image_name(ext)
    #     image_path = destination+"/"+image_name
    #     image_full_path = str(self.MEDIA_ROOT) + "/" + image_name
    #     if not os.path.exists(os.path.dirname(filename)):
    #         try:
    #             os.makedirs(os.path.dirname(image_full_path))
    #         except OSError as exc:  # Guard against race condition
    #             if exc.errno != errno.EEXIST:
    #                 raise Response(str(exc))
    #     with open(image_full_path, 'wb') as f:
    #         try:
    #             f.write(imgdata)
    #         except Exception as e:
    #             raise Response(str(e))
